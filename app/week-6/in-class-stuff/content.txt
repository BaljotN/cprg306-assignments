//Creating accessing and modifying arrays
//Methods: map, filter, sort, reduce

//Creating a array
const arr = [];

//setting values
arr[0] = 3;
arr[1] = 4;
arr[2] = 5;

//Creating array again
const arr2 =[3, 4, 5];

//Accessing values
console.log(arr2[1]); // prints 4

//map function - returns a new array with the results of calling a provided function on
//every element in the calling array

const arr3 = arr2.map((value) => value * 2); //arr3 = [6, 8, 10]

const arr4 = arr3;
arr4[0] = 100; //arr4 = [100,8,10]

const arr5 = arr3.map(n => n + 20)//arr4 = [120, 28, 30]

//Filter function - returns a new array with all elements that pass the test implemented
//by the provided function

const arr6 = arr5.filter((value) => value > 100); //arr6 = [120]

//reduce function - applies a function against an accumulator and each element in the
//array (from left to right) to reduce it to a single value
arr5; //[120, 28, 30]
const sum = arr5.reduce((acc,value) => acc + value, 0) //178


//sort function - sorts the elements of an array in place and returns the sorted array
//Modifies array instead of making new array
const arr7 = [3, 1, 5, 2, 4, 10];
arr7.sort(); // [1,10,2,3,4,5] - if you do it like this it sorts array like string so like first letter 
arr7.sort((a,b) => a - b);
//sort takes a function as a argument. this function should return a negative number if
a should come before b, a positive number if a should come after b, and 0 if they are 
equal
arr7.sort((a,b) => {if (a < 0) return - 1; else return 1}); //[1, 2, 3, 4, 5, 10]

